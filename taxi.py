# -*- coding: utf-8 -*-
"""taxi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iq7SVzcUxEu_wBKuI42vjGzElOSLHVPf
"""

from matplotlib import animation
import os
import gymnasium as gym
import numpy as np
import matplotlib.pyplot as plt
import pickle
def save_frames_as_gif(frames, episode, filename='taxi_test.gif', path='./taxi_gif/'):
    if not os.path.exists(path):
        os.makedirs(path)

    plt.figure(figsize=(frames[0].shape[1]/72.0, frames[0].shape[0]/72.0), dpi=72)
    patch = plt.imshow(frames[0])
    plt.axis('off')

    def animate(i):
        patch.set_data(frames[i])

    anim = animation.FuncAnimation(plt.gcf(), animate, frames=len(frames), interval=200)
    anim.save(os.path.join(path, filename), writer='pillow')
    plt.close()

# def run(episodes, is_training=True, render=False):
#     env = gym.make('Taxi-v3', render_mode='rgb_array' if render else None)

#     if is_training:
#         q = np.zeros((env.observation_space.n, env.action_space.n))
#     else:
#         with open('taxi.pkl', 'rb') as f:
#             q = pickle.load(f)

#     learning_rate_a = 0.9
#     discount_factor_g = 0.9
#     epsilon = 1.0
#     epsilon_decay_rate = 0.0001
#     rng = np.random.default_rng()

#     rewards_per_episode = np.zeros(episodes)

#     for i in range(episodes):
#         state = env.reset()[0]
#         terminated = False
#         truncated = False
#         rewards = 0
#         frames = []

#         while not terminated and not truncated:
#             if is_training and rng.random() < epsilon:
#                 action = env.action_space.sample()
#             else:
#                 action = np.argmax(q[state, :])

#             new_state, reward, terminated, truncated, _ = env.step(action)
#             rewards += reward

#             if is_training:
#                 q[state, action] = q[state, action] + learning_rate_a * (
#                     reward + discount_factor_g * np.max(q[new_state, :]) - q[state, action]
#                 )

#             state = new_state

#             if render:
#                 frame = env.render()
#                 frames.append(frame)

#         if render:
#             save_frames_as_gif(frames, i, filename=f"taxi_episode_{i}.gif")

#         if is_training:
#             epsilon = max(epsilon - epsilon_decay_rate, 0)
#             if epsilon == 0:
#                 learning_rate_a = 0.0001

#         rewards_per_episode[i] = rewards

#     env.close()

#     if is_training:
#         with open("taxi.pkl", "wb") as f:
#             pickle.dump(q, f)

# if __name__ == '__main__':
#     run(15000)  # Train and save Q-table
#     run(5, is_training=False, render=True)  # Test and generate GIFs

def train_taxi(episodes=15000):
    import gymnasium as gym
    import numpy as np
    import pickle

    env = gym.make('Taxi-v3')
    q = np.zeros((env.observation_space.n, env.action_space.n))

    learning_rate_a = 0.9
    discount_factor_g = 0.9
    epsilon = 1.0
    epsilon_decay_rate = 0.0001
    rng = np.random.default_rng()

    for i in range(episodes):
        state = env.reset()[0]
        terminated = False
        truncated = False

        while not terminated and not truncated:
            if rng.random() < epsilon:
                action = env.action_space.sample()
            else:
                action = np.argmax(q[state, :])

            new_state, reward, terminated, truncated, _ = env.step(action)
            q[state, action] = q[state, action] + learning_rate_a * (
                reward + discount_factor_g * np.max(q[new_state, :]) - q[state, action]
            )
            state = new_state

        epsilon = max(epsilon - epsilon_decay_rate, 0)
        if epsilon == 0:
            learning_rate_a = 0.0001

    with open("taxi.pkl", "wb") as f:
        pickle.dump(q, f)

    env.close()

def test_taxi(episodes=5):
    import gymnasium as gym
    import pickle
    import numpy as np

    env = gym.make('Taxi-v3', render_mode='rgb_array')

    with open("taxi.pkl", "rb") as f:
        q = pickle.load(f)

    for i in range(episodes):
        state = env.reset()[0]
        terminated = False
        truncated = False
        frames = []

        while not terminated and not truncated:
            action = np.argmax(q[state, :])
            state, reward, terminated, truncated, _ = env.step(action)
            frames.append(env.render())

        save_frames_as_gif(frames, i, filename=f"taxi_episode_{i}.gif")

    env.close()

# train_taxi()

# test_taxi()